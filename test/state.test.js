const { expect } = require("chai");
const { ethers } = require("hardhat");
const bigInt = require("big-integer");

describe("State", () => {
    let verifier;
    let state;

    before(async () => {
        const Verifier = await ethers.getContractFactory("Verifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();

        const State = await ethers.getContractFactory("State");
        state = await State.deploy(verifier.address);
        await state.deployed();
    });

    // Note: smart contract params (including proofs) were generated by the publisher server

    it("Positive: initial state publishing", async () => {
        const params = {
            "id": "208578539075161066941045451408520022623342707645795115074489763243991826432",
            "oldState": "14474187484712964640066150687396643035041618032651513123201430169484329721025",
            "newState": "11711275891690646697934795346159787577842574322370736278385559067855855270682",
            "isOldStateGenesis": "1",
            "a": ["10727822760215079033439400753772346848878603610931881955624566836804248652445",
                "2899934117553636695063093062091606030202192874576205004983752852686868595018"],
            "b": [["7250600461944921380283029847479225025635073742905153890747899626894985259706", "1182522281352830109875111757067976974471754234198124614427382315293573923532"],
                ["11806966936716379463384356212652489947522428783486152665307768322632115339825", "14634683213248535885434253427289075323897210720548921735749927495546064884823"]],
            "c": ["9527903825169648498515349560170458499890188440074281559771775000480993460431",
                "18843521982987281238718407237877874754085858267728986501038042799464940847052"]
        }

        await state.transitState(params.id, params.oldState, params.newState, params.isOldStateGenesis, params.a, params.b, params.c);
        const res0 = await state.getState(params.id);
        expect(res0.toString()).to.be.equal(bigInt(params.newState).toString());
    });

    it("Positive: regular state update", async () => {
        const params = {
            "id": "208578539075161066941045451408520022623342707645795115074489763243991826432",
            "oldState": "11711275891690646697934795346159787577842574322370736278385559067855855270682",
            "newState": "19094559214653237151271807295056401387313766159809380528101899451257118795537",
            "isOldStateGenesis": "0",
            "a": ["21477293567129332906107128833847683799757293999244927609678778030395908480829",
                "11373661794371631277125868506432624861995287096086582443746397661483186028337"],
            "b": [["21843376497740396969889439940862563456267154366695101618595905815055838148218", "9726534505482480214795246549565223701559958916572246309791118541022511839954"],
                ["20967909663755934780921822976087091022406509008861524255874220094864424729495", "18856596863997366076750417262026919647853073185660260543384863500634979017678"]],
            "c": ["19339538540666990370231229587142794053028488731805589222206871779103746843693",
                    "9777325254604351396766571146098007506642783545244591325603876586010085071416"]
        };

        await state.transitState(params.id, params.oldState, params.newState, params.isOldStateGenesis, params.a, params.b, params.c);
        const res = await state.getState(params.id);
        expect(res.toString()).to.be.equal(bigInt(params.newState).toString());
    });

    it("Negative: state update with oldState param not equal the last state in the smart contract", async () => {
        const params = {
            "id": "208578539075161066941045451408520022623342707645795115074489763243991826432",
            "oldState": "14474187484712964640066150687396643035041618032651513123201430169484329721025",
            "newState": "11711275891690646697934795346159787577842574322370736278385559067855855270682",
            "isOldStateGenesis": "0",
            "a": ["10727822760215079033439400753772346848878603610931881955624566836804248652445",
                "2899934117553636695063093062091606030202192874576205004983752852686868595018"],
            "b": [["7250600461944921380283029847479225025635073742905153890747899626894985259706", "1182522281352830109875111757067976974471754234198124614427382315293573923532"],
                ["11806966936716379463384356212652489947522428783486152665307768322632115339825", "14634683213248535885434253427289075323897210720548921735749927495546064884823"]],
            "c": ["9527903825169648498515349560170458499890188440074281559771775000480993460431",
                "18843521982987281238718407237877874754085858267728986501038042799464940847052"]
        };

        const expectedErrorText = "oldState argument should be equal to the latest identity state in smart contract when isOldStateGenesis == 0";
        let isException = false;
        try {
            await state.transitState(params.id, params.oldState, params.newState, params.isOldStateGenesis, params.a, params.b, params.c);
        } catch (e) {
            isException = true;
            expect(e.message).contains(expectedErrorText);
        }
        expect(isException).to.equal(true)

        const res = await state.getState(params.id);
        expect(res.toString()).to.not.be.equal(bigInt(params.newState).toString());
    });

    it("Negative: state publishing with isOldStateGenesis = 0 for initial state publishing", async () => {
        const params = {
            "id": "14474187484712964640066150687396643035041618032651513123201430169484329721025",
            "oldState": "14474187484712964640066150687396643035041618032651513123201430169484329721025",
            "newState": "11711275891690646697934795346159787577842574322370736278385559067855855270682",
            "isOldStateGenesis": "0",
            "a": ["10727822760215079033439400753772346848878603610931881955624566836804248652445",
                "2899934117553636695063093062091606030202192874576205004983752852686868595018"],
            "b": [["7250600461944921380283029847479225025635073742905153890747899626894985259706", "1182522281352830109875111757067976974471754234198124614427382315293573923532",],
                ["11806966936716379463384356212652489947522428783486152665307768322632115339825", "14634683213248535885434253427289075323897210720548921735749927495546064884823",
                ]],
            "c": ["9527903825169648498515349560170458499890188440074281559771775000480993460431",
                "18843521982987281238718407237877874754085858267728986501038042799464940847052"]
        };

        const expectedErrorText = "there should be at least one state for identity in smart contract when isOldStateGenesis == 0";
        let isException = false;
        try {
            await state.transitState(params.id, params.oldState, params.newState, params.isOldStateGenesis, params.a, params.b, params.c);
        } catch (e) {
            isException = true;
            expect(e.message).contains(expectedErrorText);
        }
        expect(isException).to.equal(true)

        const res = await state.getState(params.id);
        expect(res.toString()).to.be.equal("0");
    });
});
